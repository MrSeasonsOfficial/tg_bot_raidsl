from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
from datetime import datetime
from pytz import timezone
import asyncio
import nest_asyncio
import json
import os
import random
import re



# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
custom_tz = timezone("Asia/Yekaterinburg")

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 5036062193  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
SUBSCRIBED_USERS_FILE = "subscribed_chats.json"
SCHEDULE_FILE = "schedule.json"

# –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
RU_DAYS = {
    "monday": "–ü–ù",
    "tuesday": "–í–¢",
    "wednesday": "–°–†",
    "thursday": "–ß–¢",
    "friday": "–ü–¢",
    "saturday": "–°–ë",
    "sunday": "–í–°",
}
RU_NOTIFICATION_TYPES = {
    'daily': '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ',
    'weekly': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
    'biweekly_odd': '–ù–µ—á—ë—Ç–Ω—ã–µ –Ω–µ–¥–µ–ª–∏',
    'biweekly_even': '–ß—ë—Ç–Ω—ã–µ –Ω–µ–¥–µ–ª–∏',
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_subscribed_users():
    try:
        with open("subscribed_chats.json", "r") as f:
            data = json.load(f)
            subscribed_users = data.get("subscribed_chats", [])
            return subscribed_users
    except FileNotFoundError:
        print("–§–∞–π–ª 'subscribed_chats.json' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫.")  # –û—Ç–ª–∞–¥–∫–∞
        return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_subscribed_users(subscribed_users):
    with open(SUBSCRIBED_USERS_FILE, "w", encoding="utf-8") as f:
        json.dump({"subscribed_chats": subscribed_users}, f)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
def load_schedule():
    if os.path.exists(SCHEDULE_FILE):
        with open(SCHEDULE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
def save_schedule(schedule):
    with open(SCHEDULE_FILE, "w", encoding="utf-8") as f:
        json.dump(schedule, f, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async def on_startup(application):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    subscribed_chats = load_subscribed_users()
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule = load_schedule()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await send_scheduled_messages_immediately(application, subscribed_chats, schedule)


# –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
async def send_scheduled_messages(application):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    subscribed_chats = load_subscribed_users()
    while True:
        now = datetime.now(custom_tz)
        current_day = now.strftime('%A').lower()
        current_time = now.strftime('%H:%M')
        current_week = now.isocalendar()[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –ø–æ ISO-–∫–∞–ª–µ–Ω–¥–∞—Ä—é
        current_day_of_month = now.day  # –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –¥–ª—è –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        formatted_day_of_month = f"day_{current_day_of_month:02d}"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ —Å –≤–µ–¥—É—â–∏–º –Ω—É–ª–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule = load_schedule()

        # –û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ)
        if "daily" in schedule:
            for time, message in schedule["daily"].items():
                if time == current_time:
                    for chat_id in subscribed_chats:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ chat_id
                        try:
                            await application.bot.send_message(chat_id=chat_id, text=message)
                        except Exception as e:
                            pass  # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if "weekly" in schedule:
            if current_day in schedule["weekly"]:
                for time, message in schedule["weekly"][current_day].items():
                    if time == current_time:
                        for chat_id in subscribed_chats:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ chat_id
                            try:
                                await application.bot.send_message(chat_id=chat_id, text=message)
                            except Exception as e:
                                pass  # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        # –ù–µ—á—ë—Ç–Ω—ã–µ –Ω–µ–¥–µ–ª–∏
        biweekly_odd_key = f"biweekly_odd_{current_day}"
        if biweekly_odd_key in schedule:
            if current_week % 2 == 1:  # –ù–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è (–ø–æ ISO-–Ω–æ–º–µ—Ä—É –Ω–µ–¥–µ–ª–∏)
                for time, message in schedule[biweekly_odd_key].items():
                    if time == current_time:
                        for chat_id in subscribed_chats:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ chat_id
                            try:
                                await application.bot.send_message(chat_id=chat_id, text=message)
                            except Exception as e:
                                pass  # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        # –ß—ë—Ç–Ω—ã–µ –Ω–µ–¥–µ–ª–∏
        biweekly_even_key = f"biweekly_even_{current_day}"
        if biweekly_even_key in schedule:
            if current_week % 2 == 0:  # –ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è (–ø–æ ISO-–Ω–æ–º–µ—Ä—É –Ω–µ–¥–µ–ª–∏)
                for time, message in schedule[biweekly_even_key].items():
                    if time == current_time:
                        for chat_id in subscribed_chats:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ chat_id
                            try:
                                await application.bot.send_message(chat_id=chat_id, text=message)
                            except Exception as e:
                                pass  # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        # –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if "monthly" in schedule:
            if formatted_day_of_month in schedule["monthly"]:
                for time, message in schedule["monthly"][formatted_day_of_month].items():
                    if time == current_time:
                        for chat_id in subscribed_chats:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ chat_id
                            try:
                                await application.bot.send_message(chat_id=chat_id, text=message)
                            except Exception as e:
                                pass  # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        # –û–∂–∏–¥–∞–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(60)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    subscribed_chats = context.application.bot_data.setdefault("subscribed_chats", load_subscribed_users())

    if chat_id not in subscribed_chats:
        subscribed_chats.append(chat_id)
        save_subscribed_users(subscribed_chats)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.")
    else:
        reply = await get_random_reply_from_file()
        await update.message.reply_text(reply)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
async def get_random_reply_from_file(file_path="jokes.txt"):
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            replies = f.readlines()
        return random.choice(replies).strip()
    except FileNotFoundError:
        return "‚ùó–û—Ç–≤–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª jokes.txt —Å –æ—Ç–≤–µ—Ç–∞–º–∏."

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    subscribed_chats = context.application.bot_data.setdefault("subscribed_chats", load_subscribed_users())

    if chat_id in subscribed_chats:
        subscribed_chats.remove(chat_id)
        save_subscribed_users(subscribed_chats)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /now
async def now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(custom_tz)
    current_time = now.strftime('%H:%M')
    current_day = now.strftime('%A').lower()
    current_week = now.isocalendar()[1]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –ø–æ ISO-–∫–∞–ª–µ–Ω–¥–∞—Ä—é

    current_day_ru = RU_DAYS.get(current_day, current_day).capitalize()
    week_type = "—á—ë—Ç–Ω–∞—è" if current_week % 2 == 0 else "–Ω–µ—á—ë—Ç–Ω–∞—è"

    response = f"üïí–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}\nüìÖ–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {current_day_ru}\nüóìÔ∏è–ß–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏: {week_type}"
    await update.message.reply_text(response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /next
async def next(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(custom_tz)
    current_day = now.strftime('%A').lower()
    current_time = now.strftime('%H:%M')
    current_week = int(now.strftime('%U'))
    current_month = now.month
    current_day_of_month = now.day

    schedule = load_schedule()
    next_message = None
    next_time_diff = None

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–Ω–∏—Ü—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    def time_diff(time_str):
        time_obj = datetime.strptime(time_str, '%H:%M')
        current_time_obj = datetime.strptime(current_time, '%H:%M')
        return (time_obj - current_time_obj).total_seconds()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if "daily" in schedule:
        for time, task in schedule["daily"].items():
            diff = time_diff(time)
            if diff > 0 and (next_time_diff is None or diff < next_time_diff):
                next_message = f"üîî–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ): {task} –≤ {time}"
                next_time_diff = diff

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if "weekly" in schedule:
        for day, tasks in schedule["weekly"].items():
            if day == current_day:
                for time, task in tasks.items():
                    diff = time_diff(time)
                    if diff > 0 and (next_time_diff is None or diff < next_time_diff):
                        next_message = f"üîî–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ): {task} –≤ {time} (–Ω–∞ {RU_DAYS.get(day, day).capitalize()})"
                        next_time_diff = diff

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –Ω–µ—á–µ—Ç–Ω—ã—Ö –Ω–µ–¥–µ–ª—å
    if "biweekly_odd" in schedule and (current_week % 2 == 1):
        for day, tasks in schedule["biweekly_odd"].items():
            if day == current_day:
                for time, task in tasks.items():
                    diff = time_diff(time)
                    if diff > 0 and (next_time_diff is None or diff < next_time_diff):
                        next_message = f"üîî–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–Ω–µ—á–µ—Ç–Ω—ã–µ –Ω–µ–¥–µ–ª–∏): {task} –≤ {time} (–Ω–∞ {RU_DAYS.get(day, day).capitalize()})"
                        next_time_diff = diff

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —á–µ—Ç–Ω—ã—Ö –Ω–µ–¥–µ–ª—å
    if "biweekly_even" in schedule and (current_week % 2 == 0):
        for day, tasks in schedule["biweekly_even"].items():
            if day == current_day:
                for time, task in tasks.items():
                    diff = time_diff(time)
                    if diff > 0 and (next_time_diff is None or diff < next_time_diff):
                        next_message = f"üîî–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—á–µ—Ç–Ω—ã–µ –Ω–µ–¥–µ–ª–∏): {task} –≤ {time} (–Ω–∞ {RU_DAYS.get(day, day).capitalize()})"
                        next_time_diff = diff

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if "monthly" in schedule:
        for day_key, tasks in schedule["monthly"].items():
            day_of_month = int(day_key.split('_')[1])
            if day_of_month >= current_day_of_month:
                for time, task in tasks.items():
                    diff = time_diff(time)
                    if diff > 0 and (next_time_diff is None or diff < next_time_diff):
                        next_message = f"üîî–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–µ–∂–µ–º–µ—Å—è—á–Ω–æ): {task} –≤ {time} (–Ω–∞ {day_of_month}-–µ —á–∏—Å–ª–æ)"
                        next_time_diff = diff

    if next_message:
        await update.message.reply_text(next_message)
    else:
        await update.message.reply_text("‚ùó–°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

def format_schedule(schedule):
    message = "üìÖ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–í—Ä–µ–º—è –ú–°–ö+2):\n\n"
    schedule = load_schedule()
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    message += "üóì –ï–∂–µ–¥–Ω–µ–≤–Ω–æ:\n"
    for time, task in schedule["daily"].items():
        message += f"  ‚è∞ {time} ‚Äî {task}\n"

    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    message += "\nüóì –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ:\n"
    for day, tasks in schedule["weekly"].items():
        for time, task in tasks.items():
            message += f"  ‚è∞ {RU_DAYS.get(day)} ‚Äî {time} ‚Äî {task}\n"

    # –ß—ë—Ç–Ω—ã–µ –Ω–µ–¥–µ–ª–∏
    message += "\nüóì –ß—ë—Ç–Ω—ã–µ –Ω–µ–¥–µ–ª–∏:\n"
    for day, tasks in schedule["biweekly_even"].items():
        for time, task in tasks.items():
            message += f"  ‚è∞ {RU_DAYS.get(day)} ‚Äî {time} ‚Äî {task}\n"

    # –ù–µ—á—ë—Ç–Ω—ã–µ –Ω–µ–¥–µ–ª–∏
    message += "\nüóì –ù–µ—á—ë—Ç–Ω—ã–µ –Ω–µ–¥–µ–ª–∏:\n"
    for day, tasks in schedule["biweekly_odd"].items():
        for time, task in tasks.items():
            message += f"  ‚è∞ {RU_DAYS.get(day)} ‚Äî {time} ‚Äî {task}\n"

    # –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    message += "\nüóì –ï–∂–µ–º–µ—Å—è—á–Ω–æ:\n"
    for day, tasks in schedule["monthly"].items():
        # –ó–∞–º–µ–Ω–∏–º day_x –Ω–∞ "–î–µ–Ω—å X"
        if day.startswith("day_"):
            day_number = day.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ "day_"
            day = f"–î–µ–Ω—å {day_number}"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ "–î–µ–Ω—å X"
        for time, task in tasks.items():
            message += f"  ‚è∞ {day} ‚Äî {time} ‚Äî {task}\n"

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    message += "\nüí¨ *–≠—Ç–æ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.*"

    return message

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def delete_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–∫–ª—é—á—ë–Ω
    context.user_data.clear()
    context.user_data["delete_mode"] = True  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è

    schedule = load_schedule()
    notifications = []
    index_map = {}

    idx = 1
    for type_key, days in schedule.items():
        if not isinstance(days, dict):
            continue
        for day, tasks in days.items():
            if not isinstance(tasks, dict):
                continue
            for time, task in tasks.items():
                notifications.append(f"{idx}. [{RU_NOTIFICATION_TYPES.get(type_key, type_key)}] {RU_DAYS.get(day, day)} - {time}: {task}")
                index_map[idx] = (type_key, day, time)
                idx += 1

    if notifications:
        message_text = "üìã –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n" + "\n".join(notifications)
        message_text += "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        context.user_data["index_map"] = index_map
        await update.message.reply_text(message_text)
    else:
        await update.message.reply_text("‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def handle_delete_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        return

    if not context.user_data.get("delete_mode"):
        return  # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–∏—è, –≤—ã—Ö–æ–¥–∏–º

    try:
        notification_number = int(update.message.text.strip())
    except ValueError:
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return

    index_map = context.user_data.get("index_map", {})
    if notification_number not in index_map:
        await update.message.reply_text("‚ùó –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    type_key, day, time = index_map[notification_number]
    schedule = load_schedule()

    # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    del schedule[type_key][day][time]
    if not schedule[type_key][day]:
        del schedule[type_key][day]
    if not schedule[type_key]:
        del schedule[type_key]

    save_schedule(schedule)

    await update.message.reply_text(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {RU_DAYS.get(day, day)} - {time}")

    # –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è
    context.user_data.clear()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —á–∞—Ç
async def show_schedule(update: Update, context):
    schedule = load_schedule()
    formatted_schedule = format_schedule(schedule)
    await update.message.reply_text(formatted_schedule)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
def is_valid_time(time_str: str) -> bool:
    pattern = r'^[0-2][0-9]:[0-5][0-9]$'  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ß–ß:–ú–ú
    return bool(re.match(pattern, time_str))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def add_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")
        return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤–∫–ª—é—á—ë–Ω
    context.user_data.clear()
    context.user_data["add_mode"] = True  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

    keyboard = [
        [InlineKeyboardButton("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ", callback_data="daily")],
        [InlineKeyboardButton("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ", callback_data="weekly")],
        [InlineKeyboardButton("–ß—ë—Ç–Ω—ã–µ –Ω–µ–¥–µ–ª–∏", callback_data="biweekly_even")],
        [InlineKeyboardButton("–ù–µ—á—ë—Ç–Ω—ã–µ –Ω–µ–¥–µ–ª–∏", callback_data="biweekly_odd")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    selected_type = query.data

    if selected_type in ["daily", "weekly", "biweekly_even", "biweekly_odd"]:
        context.user_data["selected_type"] = selected_type  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        if selected_type == "daily":
            await query.edit_message_text(text="–í—ã –≤—ã–±—Ä–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
        elif selected_type in ["weekly", "biweekly_even", "biweekly_odd"]:
            # –î–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏–ª–∏ –¥–≤—É–Ω–µ–¥–µ–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–∏
            keyboard = [
                [InlineKeyboardButton(RU_DAYS[day].capitalize(), callback_data=day) for day in RU_DAYS.keys()]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=reply_markup)
    else:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        selected_day = query.data
        context.user_data["selected_day"] = selected_day

        await query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–Ω—å: {RU_DAYS.get(selected_day, selected_day).capitalize()}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")

async def day_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    selected_day = query.data  # –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    context.user_data["selected_day"] = selected_day  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏

    # –ü–æ–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await query.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–Ω—å: {RU_DAYS.get(selected_day, selected_day).capitalize()}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def add_time_and_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    user_data = context.user_data
    selected_type = user_data.get("selected_type")

    if not selected_type:
        await update.message.reply_text("–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    if selected_type == "daily":
        if "time" not in user_data:
            time = update.message.text
            if not is_valid_time(time):
                await update.message.reply_text("–í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.")
                return

            user_data["time"] = time
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        elif "time" in user_data and "task" not in user_data:
            task = update.message.text
            time = user_data["time"]

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            schedule = load_schedule()
            schedule.setdefault("daily", {})[time] = task
            save_schedule(schedule)

            await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ {time} - {task}")

            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data.clear()

    elif selected_type in ["weekly", "biweekly_odd", "biweekly_even"]:
        if "selected_day" not in user_data:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.")
            return

        selected_day = user_data["selected_day"]

        if "time" not in user_data:
            time = update.message.text
            if not is_valid_time(time):
                await update.message.reply_text("‚ùó–í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.")
                return

            user_data["time"] = time
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        elif "time" in user_data and "task" not in user_data:
            task = update.message.text
            time = user_data["time"]

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —Ç–∏–ø–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
            schedule = load_schedule()

            # –î–ª—è weekly, biweekly_odd, biweekly_even —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å
            if selected_type == "weekly":
                schedule.setdefault(f"weekly", {}).setdefault(selected_day, {})[time] = task
            elif selected_type == "biweekly_odd":
                schedule.setdefault(f"biweekly_odd", {}).setdefault(selected_day, {})[time] = task
            elif selected_type == "biweekly_even":
                schedule.setdefault(f"biweekly_even", {}).setdefault(selected_day, {})[time] = task

            save_schedule(schedule)

            await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {RU_DAYS.get(selected_day, selected_day).capitalize()}, {time} - {task}")

            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data.clear()




# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_bot():
    nest_asyncio.apply()  # –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–æ–±—ã—Ç–∏–π

    token = "7949312036:AAEXXr4n_BBDjqtLjD7RuaYJ1P_FGod-v7A"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    application = ApplicationBuilder().token(token).read_timeout(60).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("schedule", show_schedule))
    application.add_handler(CommandHandler("add", add_schedule))
    application.add_handler(CommandHandler("now", now))
    application.add_handler(CommandHandler("next", next))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(CommandHandler("delete", delete_schedule))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_delete_input))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_time_and_task))

    # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
    asyncio.create_task(send_scheduled_messages(application))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling(timeout=60)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
if __name__ == '__main__':
    asyncio.run(run_bot())
